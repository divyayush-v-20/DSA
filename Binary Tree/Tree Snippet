class node{
    public:
    int data;
    node* left;
    node* right;
    node(int d){
        this -> data = d;
        this -> left = NULL;
        this -> right = NULL;
    }
};
node* createTree(node* root){
    int d;
    cin>>d;
    root = new node(d);

    if(d == -1){
        return NULL;
    }

    cout<<"enter left node of "<<root -> data<<endl;
    root -> left = createTree (root -> left);
    cout<<"enter right node of "<<root -> data<<endl;
    root -> right = createTree (root -> right);

    return root;
}
void levelOrderTraversal(node* root){
    queue<node*> q;
    q.push(root);
    q.push(NULL);

    while(!q.empty()){
        node* temp = q.front();
        q.pop();

        if(temp == NULL){
            cout<<endl;
            if(!q.empty()){
                q.push(NULL);
            }
        }
        else{
            cout<<temp -> data<<" ";

            if(temp -> left){
                q.push(temp -> left);
            }
            if(temp -> right){
                q.push(temp -> right);
            }
        }
    }
}